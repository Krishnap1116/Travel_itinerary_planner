# -*- coding: utf-8 -*-
"""travel_planner.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UQZoP2I2I3RAXLdjpj-L_LxEsuzx4yL8
"""

# ! pip install langchain langchain_core langchain_groq langchain_community langchain

# ! pip install langgraph

import os
from typing import TypedDict, Annotated, List
from langgraph.graph import StateGraph, END
from langchain_core.messages import HumanMessage, AIMessage
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.runnables.graph import MermaidDrawMethod
from IPython.display import Image, display
from dotenv import load_dotenv

load_dotenv()  # load variables from .env file

API_KEY = os.getenv("GROQ_API_KEY")

"""## Define Agent"""

class PlannerState(TypedDict):
  messages : Annotated[List[AIMessage | HumanMessage], " the messages in the conversation"]
  city: str
  interest: List[str]
  itinerary: str

from ast import mod
from langchain_groq import ChatGroq
llm= ChatGroq(
    temperature=0,
    groq_api_key=API_KEY,
    model_name="llama-3.3-70b-versatile",
)
result= llm.invoke(" what is multi AI agent")
result.content

itinerary_prompt=ChatPromptTemplate.from_messages([
    ("system", " you are a helpful travel assistant. Create a day trip itinerary for {city} based on the user's {interest}. Provide a brief, bulleted itinerary. "),
    ("human", "Create an itinerary for my day trip.")
])

"""## create a simple fron end app"""

# !pip install gradio

import gradio as gr

def input_city1( city: str, state: PlannerState) -> PlannerState:
  return{
      **state,
      "city":city,
      "messages": state["messages"] + [HumanMessage(content=city)]
  }

def input_interest1( interest: str, state: PlannerState) -> PlannerState:

  return{
      **state,
      "interest": [interest.strip() for interest in interest.split(",")],
      "messages": state["messages"] + [HumanMessage(content=interest)]
  }

def create_itinerary1( state: PlannerState) -> str:
  response= llm.invoke(itinerary_prompt.format_messages(city=state["city"], interest=",".join(state["interest"])))
  state['itinerary']= response.content
  state['messages']+=[AIMessage(content=response.content)]
  return response.content

def travel_planner1(city:str, interest:str):
  state={
      "messages":[],
      "city": "",
      "interest":[],
      "itinerary": "",
  }
  state=input_city1(city,state)
  state=input_interest1(interest, state)
  itinerary=create_itinerary1(state)
  return itinerary

interface= gr.Interface(
    fn=travel_planner1,
    theme='Yntec/HaleyCH_Theme_Orange_Green',
    inputs=[
        gr.Textbox(label="Enter the city name"),
        gr.Textbox(label="Enter your interests(comma-seperated)")
    ],
    outputs=[
        gr.Textbox(label="Generated Itinerary", lines=20, show_copy_button=True)
    ],
    title=" Travel Itinerary Planner",
    description=" Enter city and your interests to generate a personalized day trip itinerary"
)
interface.launch(share=True)

